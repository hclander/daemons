Movemos los SEC de la capa de transporte a la capa de aplicación (comandos).


********************************
** Protocolo registro de datos ** (borrador v1.1)
*********************************

El "centro" de todo es el registro Gps.

El identificador de cada registro es su fecha y hora (bien en epoch o en formato binario "ordenado").

El localizador marcará (en transporte) cada registro enviado en tiempo real (monitor) con un número de secuencia (SECL) de 2 bytes, que empezará en 1 para cada nueva sesión (0 significa que no lleva nº de secuencia).

El localizador no marcará con SECL los "reenvíos" ni las tramas que no pasen por el registro (SECL=0). En cualquier caso, SECL no se almacena en el registro.

El servidor marcará todas sus preguntas con su propia numeración SECS y el localizador marcará sus respuestas con SECL=0, pero añadirá el SECS del servidor, para que aquel sepa relacionar la pregunta con la(s) respuesta(s). El servidor reiniciará su SECS cuando detecte que el localizador ha reiniciado la suya (SECL).

Al no haber número de secuencia en el registro de datos:

    El localizador debe ser capaz de encontrar un registro a partir de su FH (fecha y hora):
        bien porque mantiene una tabla a modo de índice, que relacione FH con la posición en memoria de ese registro 
        bien porque el formato de FH garantiza que el orden "alfabético" coincide con el cronológico y por tanto puede buscarse iterativamente de forma eficiente
    Cada vez que el servidor detecte que le faltan registros, pedirá al localizador que le envíe todos los registros entre esas dos FH. El localizador enviará todos los registros consecutivos que quepan en una trama de transporte, y parará aunque le falten más por enviar. De esta forma el servidor se garantiza que le llegan ordenados, aunque a cambio tendrá que realizar una nueva petición por cada trama de transporte del localizador.


Puede utilizarse una codificación diferente para monitor y para registro (histórico), que manera que en el registro se almacenen los datos comprimidos para aprovechar al máximo la memoria no volátil.


Al usar FH como "clave primaria", ya no hay problemas cuando se sustituye un localizador por otro, y al no guardarse número de secuencia en el registro, ya no hay problemas cuando la memoria del localizador falla.



DUDA: ¿esto es opcional?: "El servidor reiniciará su SECS cuando detecte que el localizador ha reiniciado la suya (SECL)."



*********************************
***** Protocolo transmisión ***** (borrador v0.8)
*********************************

El formato de la trama de transporte es el mismo en ambos sentidos, con estas salvedades:

        - En sentido servidor a localizador, el máximo teórico es 1536 bytes, pero con algunos operadores no, por lo que pondremos un límite de 1465 bytes.
        - En sentido servidor a localizador, el NSR puede ser 0x00000000, para casos dónde es útil no indicar el NSR del localizador (p.e. tramas "prefabricadas", órdenes de cambio de nº de serie que no tienen éxito...)
        - En sentido servidor a localizador, solo debe incluirse un comando por trama de transporte.


-Formato trama de transporte:
-------------------------------------------

    Start(1) Lon(2) NSR(4) DATOS(n) CHK(1/2)

   
        - Entre paréntesis se indica el nº de bytes
        - Start: ecxx vvvv (e=bit extremista menor ,, c=CRC en vez de XOR ,, v=versión del protocolo) [en ppio. solo v]
        - Lon: nº de bytes que vienen a continuación (incluído checksum); puede ser 0 (desconocida), en cuyo caso si el paquete no llega entero no se puede recomponer [en ppio. será así para las tramas binarias que envía el localizador provenientes de su puerto serie]
        - NSR = Número de Serie (el localizador aceptará cualquier trama que contenga su NSR o 0x00000000, aunque el servidor debe evitar usar esto)
        - DATOS: en sentido servidor a localizador tiene un tamaño máximo de 1452 bytes.
        - CHK: checksum de todo lo anterior; 1 byte si es XOR, 2 bytes si es CRC [en ppio. solo XOR]


El formato de las trama de datos, es diferente en cada sentido (localizador a servidor, o servidor a localizador).



LOCALIZADOR a SERVIDOR
--------------------------------------------

-Transmite a otro(s) puerto(s):
    - UDP 4490 a 4497
    - TCP 4480 a 4487
    [en principio seguiremos con UDP y al puerto 4490]


-Formato trama de datos:
------------------------------------


    Una trama de datos se puede componer de varias subtramas de comandos/eventos, de igual o distinto tipo, una tras otra. Las subtramas pueden estar ordenadas de cualquier forma, salvo las de Gps, ya que dan su hora y posición a todas las que vengan después (hasta que aparezca otra de Gps).

    El localizador decide cuántas subtramas quiere enviar en una trama de transporte (y por tanto su longitud).
   
    Todo lo que envíe el localizador debe llevar una trama de Gps (excepto las tramas binarias de la placa de periféricos y las tramas internas -cosas irrelevantes para el cliente como tramas de reprogramación-).
   
    - Comando(1) Lon(0/1/2) Datos(n) XOR(0/1)

        - Lon: puede no existir, ser de 1 byte o de 2 (dependiendo del comando)
        - Datos: es de longitud fija para algunos comandos y variable para otros
        - XOR: puede no existir o ser de 1 byte (dependiendo del comando) [en ppio. no existirá para las tramas que envía el localizador provenientes de su puerto serie, ya que no provienen de su memoria y probablemente tengan también su propio checksum]
   

    Relación de comandos:
   
        - 0x04 = Trama "compatible": Lon(2) SECS(2) tt(1) Datos(n) [no necesita ir acompañada de una trama Gps; además en transporte la longitud]
            - Lon: puede ser 0, si el localizador no la conoce y tiene que transmitirla "al vuelo"
            - SECS será >0 si es respuesta a una pregunta del servidor.

            - tt: tipo de trama del sistema viejo (p.e. 58 para checksums, 43 para bloques eeprom, 64 para respuesta AT...)
            - Datos: cualquier trama del sistema viejo
            - NOTA: si usamos este comando para enviar la trama de IMEI "vieja", podemos mejorarla añadiendo el XOR del IMEI en el último nibble de los 8 bytes de IMEI.


        - 0x06 = Conexión: Lon(1) IMEI(15) IMEI_XOR(1) MO(1) VS(2) MC(1) [preferiblemente irá acompañando a una trama Gps] [tb. podría usar el formato "viejo" dentro de una trama compatible; en este caso tb. sería preferible que fuese precedida de una trama Gps]
            - Lon: puede ser 0 (toma valor implícito) o >20 (cuando queramos añadir bytes nuevos)
            - IMEI: podría ser guardado en Ascii en otra zona de la memoria (o en "hexa" por el método viejo, en el lugar "viejo")
            - IMEI_XOR: XOR de los dígitos del IMEI (se alamcena con el mismo método que se almacene el IMEI)
            - MO: Modo operación (0, 4, 5)
            - VS: Versión Software
            - MC: Motivo Conexión


        - 0x0A = Mensaje de texto puerto serie: Datos(n) [irá siempre acompañando a una trama Gps]
            - Datos: formato Display (¿245 bytes máximo?) = empieza siempre por "|" seguido por 2 dígitos con el tipo de datos ("TF", "DV", "AK"...) y termina siempre con 0x0D ,, Ejemplo de Datos "texto": "|TF" & texto (¿239 bytes máximo?) & CHK_DISPLAY (2 bytes) & 0x0D.


        - 0x0B = Trama binaria puerto serie: Datos(n) [no necesita ir acompañada de una trama Gps; además en transporte la longitud puede ser 0, si el localizador no la conoce y tiene que transmitirla "al vuelo"]
            - Datos: formato Binario (¿251 bytes máximo?) = # LON LON Datos2 (¿247 bytes máximo?) CHK


        - 0x10 = Gps con hora humana: Lon(1) SECL(2) SECS(2) signo_lat+latitud(3) longitud(3) signo_longitud+rumbo(1) velocidad(1) fix+hdop(1) hora_humana(4)
            - Lon: puede ser 0 (toma valor implícito) o >17 (cuando queramos añadir bytes nuevos)

            - SECL será 0 si es de histórico y >0 si es de monitor
            - SECS será 0 si es de monitor y >0 si es respuesta a una petición de histórico.
            - signo_latitud(1 bit): Sur=1
            - latitud: 7 bits de grado + 2 bytes de minutos multiplicados por 1000
            - longitud: 8 bits de grado + 2 bytes de minutos multiplicados por 1000
            - signo_longitud(1 bit): Oeste=1
            - rumbo(7 bits) = (rumbo_real/4 => de 0º a 90º)
            - velocidad en nudos
            - fix: 1 bit
            - hdop: 7 bits
            - hora_humana: año (6 bits) + mes (4 bits) + día (5 bits) + hora (5 bits) + min (6 bits) + seg (6 bits) ,, esta ordenación garantiza orden alfabético = orden cronológico


        - 0x11 = Gps con hora epoch unix: Lon(1) SECL(2) SECS(2) signo_lat+latitud(3) longitud(3) signo_longitud+rumbo(1) velocidad(1) fix+hdop(1) hora_epoch(4)

            - Es idéntica a 0x10 pero la fecha y hora son los segundos transcurridos desde 1/1/1970 0h UTC.


        - 0x13 = Gps "monitor/histórico" con formato viejo: Lon(1) SECL(2) SECS(2) Datos2(m)
            - Lon: será 17 cuando sea "monitor", >17 y <254 cuando sea monitor con bytes adicionales de trama extendida e =254 cuando sea histórico

            - SECL será 0 si es de histórico y >0 si es de monitor
            - SECS será 0 si es de monitor y >0 si es respuesta a una petición de histórico.
            - NOTA: el histórico, al ser por bloques comprimidos, no todas las posiciones tienen FH, por lo que se recibirá un bloque entero aunque solo se esté pidiendo una FH del mismo.
            - NOTA: no se envía información de eeprom ni bloque (esos conceptos ya no existen).


        - 0x15 = Hora RTC: Lon(1) epoch(4) ,, p.e. la hora del tacógrafo; aún así conviene que vaya acompañada de una trama Gps para calcular la deriva del RTC (además de para localizar los datos)


        - 0xAs = Sonda analógica: signo+divisor+origen+lon-1(1) valor(n)
            - s(4 bits) = nº de sonda (16 valores)
            - signo+divisor+origen+lon-1:
                - signo(1bit) es 1 si valor es negativo
                - divisor(3 bits) es la potencia de 10 por la que hay que dividir el valor (así siempre enviamos enteros)
                - origen(2 bits) es el origen del sensor: 0=directo, 1=placaperiféricos, 2=rf, 3=reservado
                - lon-1(2 bits) es el nº de bytes de valor
       

        - 0xCsssv = Sensores de salida de 2 estados (relés...): (1 byte) [muestra su estado; no actúa sobre ellos]
            - s(3 bits)=número_sensor: 0=R0, 1=R1, 2=R2, 3=R3, 4=R4, 5=R5, 6=R6, 7=R7
            - v(1 bit)=valor (booleano)


        - 0xDsssv = Sensor digital directo de 2 estados: (1 byte)
            - s(3 bits)=número_sensor: 0=contacto real, 1=S1, 2=S2, 3=S3, 4=S4, 5=S5, 6=S6, 7=S7
            - v(1 bit)=valor (booleano)


        - 0xEsssv = Sensor digital directo de 2 estados: (1 byte)
            - s(3 bits)=número_sensor: 0=S8, 1=S9, 2=S10, 3=S11, 4=S12, 5=S13, 6=sensor_movimiento, 7=contacto_simulado
            - v(1 bit)=valor (booleano)


        - 0xFossv = Sensor digital no directo de 2 estados: (1 byte)
            - o(1 bit)=origen: 0=placaperiféricos, 1=rf
            - s(2 bits)=número_sensor: 0=S14, 1=S15, 2=S16, 3=S17
            - v(1 bit)=valor (booleano)




    Ejemplos:

        - Gps "humano" (lat=42,22 lon=-8,65 rumbo=67º velocidad=60nudos fix=1 hdop=12 fh=20131231235959):
            00 0017 SRSRSRSR 10 12 0001 0000 2A3390 089858 91 3C 8C FHFHFHFH XO

        - Gps "epoch" con sensores (lat=42,22 lon=-8,65 rumbo=67º velocidad=60nudos fix=1 hdop=12 fh=20131231235959) + contacto=on + S1=off + S.A.1=-15.34ºC:
            00 001F SRSRSRSR 11 1A 0001 0000 2A3390 089858 91 3C 8C 52C35A7F D001 D100 A1A205FE XO

        - Gps "epoch" + mensaje de texto puerto serie (|YT):
            00 002E SRSRSRSR 11 29 0001 0000 2A3390 089858 91 3C 8C 52C35A7F 0A 7C59543031333735313032333136373230303144340D XO

        - Gps "vieja" (lat=42,22 lon=-8,65 rumbo=67º velocidad=60nudos fix=1 hdop=12 fh=20131231235959):
            00 LLLL SRSRSRSR 13 ll 0001 0000 DATOSDATOSDATOS......(250)...DATOS XO

        - Trama binaria puerto serie (asentimiento binario):
            00 000C SRSRSRSR 0B 230003999730 XO

        - Trama compatible (bloque 1):
            00 0105 SRSRSRSR 04 0100 0001 2B 010400D6000000FFFF55FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF351777040553248000060079A43C0505000000173C000000000600008240FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1C0001FF1E0000000505000040000000010101FF01010001000003FF00FF003200FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF012301FF02FF02FF020F0203FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF001200FF01FF01FF01FF01FF01FF01FF0101 XO



DUDA: ¿añadimos XOR a las tramas de Gps? (tendría que estar escrito tb. en la memoria)
DUDA: ¿añadimos XOR a las tramas de sensor analógico? (tendríamos que reducir 1 bit el divisor y 2 la longitud, para implementar ¡un checksum de 3 bits!)
DUDA: ¿añadimos cara a la trama de conexión?
DUDA: ¿añadimos longitud a trama 0x0A (si el localizador tiene búfer) o impedimos que después de esta trama vaya ninguna otra?.





SERVIDOR a LOCALIZADOR
--------------------------------------------

Cada trama de datos solo llevará una subtrama de comando, para facilitar la tarea al localizador.


-Formato trama de datos:

    - Comando(1) Lon(1/2) Datos(n)

        - Lon: puede ser de 1 byte o de 2 (dependiendo del comando)
        - Datos: es de longitud fija para algunos comandos y variable para otros (1449 bytes máximo para las tramas largas y 256 bytes máximo para las cortas)
   

    Relación de comandos:
   
        - 0xE1 = Pet. registro datos por fechas: Lon(1) SECS(2) FH_ini(4) FH_fin(4)
                -Lon: puede ser 0 (toma valor implícito) o >10 (cuando queramos añadir bytes nuevos)
                -SECS: secuencia que copiará el localizador para darnos su respuesta.

        - 0xE2 = Escribe byte: Lon(1) Pos(2) Valores(n)
                -Lon: puede ser 0 (toma valor implícito 3) o >3 (cuando queramos escribir varios bytes consecutivos)

        - 0xE5 = Enviar a puerto serie: Lon(2) Puerto(1) Datos(n)
                -Puerto: nº de puerto serie al que queremos enviar
                -Datos: máximo 1453 bytes

        - 0xE8 = Control remoto: Lon(1) Orden(1)
                -Lon: puede ser 0 (toma valor implícito) o >2 (cuando queramos añadir bytes nuevos)
                -Orden: 1=resetea, 2=resetea y conecta

        - 0xE9 = Cambio nserie: Lon(1) NSRnuevo(4)
                -Lon: puede ser 0 (toma valor implícito) o >4 (cuando queramos añadir bytes nuevos)

        - 0xEA = Pet. ckecksums: Lon(1) BL_ini(2) BL_fin(2)
                -Lon: puede ser 0 (toma valor implícito) o >4 (cuando queramos añadir bytes nuevos)
                -Si BL_ini=BL_fin=0 estamos pidiendo toda la eeprom; para Dataflash-Firmware usamos 0x010001F0, para Dataflash-Backup usamos 0x000F00FF, para Dataflash-Radares usamos 0x020002F0.

        - 0xEB = Bloque reprogr.: Lon(2) Bloque(2) Datos(n)
                -Datos: máximo 1451 bytes

        - 0xEC = Fin reprogr.: Lon(1) 0x03030303(4)
                -Lon: puede ser 0 (toma valor implícito) o >4 (cuando queramos añadir bytes nuevos)

        - 0xED = Pet. bloque config.: Lon(1) BL_ini(1) BL_fin(1)
                -Lon: puede ser 0 (toma valor implícito) o >2 (cuando queramos añadir bytes nuevos)

        - 0xEE = Comando at: Lon(1) AT(68)
                -Lon: puede ser 0 (toma valor implícito) o >68 (cuando queramos añadir bytes nuevos)

        - 0xEF = Asentimiento: Lon(1) (por lo general enviamos 1 cada 2 minutos)
                -Lon: puede ser 0 (toma valor implícito) o >0 (cuando queramos añadir bytes nuevos)
               

    Especiales:
   
        - 0xF0 = Inicio apagado: Lon(1) 0x5504040404 (5) , NSRalto (1)
                -Lon: puede ser 0 (toma valor implícito) o >6 (cuando queramos añadir bytes nuevos)

        - 0xF2 = Confirm. apagado: Lon(1) NSRbajo(1) , 0x0607080955 (5)
                -Lon: puede ser 0 (toma valor implícito) o >6 (cuando queramos añadir bytes nuevos)

        - 0xF7 = Poner en hora RTC: Lon(1) Hora(4)
                -Lon: puede ser 0 (toma valor implícito) o >4 (cuando queramos añadir bytes nuevos)

        - 0xF9 = Cancelación apagado: Lon(1) NSR(4)
                -Lon: puede ser 0 (toma valor implícito) o >4 (cuando queramos añadir bytes nuevos)



    Ejemplos:

0xE1 = Pet. registro datos por fechas: Lon(1) SECS(2) FH_ini(4) FH_fin(4)

        - Pet. registro datos:
            00 000C SRSRSRSR E1 06 0001 EPOC EPOC XO

        - Bits2 (petición bloque 2):
            00 0009 SRSRSRSR ED 02 0202 XO


        - Bits1 (escritura de un patrón concreto en el bloque 2):
            00 0109 SRSRSRSR EB 0101 02 0000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF XO

        - Asentimiento:
            00 0007 SRSRSRSR EF 00 XO



DUDA: ¿hace falta NSR en 0xF9?
DUDA: ¿agrupamos tramas con similar funcionalidad?: p.e. añadir a "comando remoto" los casos: "apagado", "comando at", "poner en hora RTC", "cambio nserie" ¿y "fin reprogr."?
DUDA: ¿SECS debería volver a "transporte"?: Parece claro que SECL no, pero SECS debería estar en tte. si queremos que los reenvíos se hagan de forma automática sin meter lógica en la aplicación... sin embargo ¿un problema de comunicación con un periférico entorpecería la comunicación con la "placa principal"?




Tramas de monitor viejas:

 
*Las tramas de monitor son siempre de 14 bytes:

-- 
trama extendida    : 1 bit
long. trama    : 2 bits  (siempre 01)
hora        : 5 bits
-- 
min.        : 6 bits
seg.        : 6 bits
rumbo_2        : 1 bit
fix        : 1 bit
contacto    : 1 bit
E/W        : 1 bit
-- 
min. lat.    : 16 bits
-- 
min. long.    : 16 bits
-- 
rumbo_1        : 1 bit
velocidad    : 7 bits
-- 
rumbo_0        : 1 bit
hdop: 7 bits
-- 
N/S        : 1 bit
grados lat.    : 7 bits
-- 
grados long.    : 8 bits
-- 
día        : 5 bits
año        : 2 bits
encendido    : 1 bit (solo aplicable en tramas de posiciones, aunque podría aportar información en tramas de monitor)
-- 
mes        : 4 bits
sensor_movim.    : 1 bit (a partir de la v150)
solicitud_asent.: 1 bit (solo aplicable en la trama de monitor ; a partir de la v40)
ultima_trama    : 1 bit (solo aplicable en la trama de monitor ; a partir de la v38)
ee_fin        : 1 bit    (solo aplicable en la trama de monitor)
-- 
bloque_fin    : 8 bits    (solo aplicable en la trama de monitor)
-


E/W:
    0 -> E ; 1 -> W
 
rumbo es la concatenación: rumbo_2 & rumbo_1 & rumbo_0
    0 -> N
    1 -> NE
    2 -> E
    3 -> SE
    4 -> S
    5 -> SO
    6 -> O
    7 -> NO
 
velocidad -> en nudos
 
N/S:
    0 -> N ; 1 -> S
 
grados long.: ¿si no se detecta trama NMEA se manda 0xFF?
 
ultima_trama: si está a 1 es que va a desconectar por tiempo (55 min.) 

